<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Html与Css面经汇总</title>
    <url>/2021/01/17/Html%E4%B8%8ECss%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ol>
<li>DOCTYPE的作用是什么？</li>
<li><code>&lt;a&gt;&lt;/a&gt;</code>标签的全部作用</li>
<li>使用data-属性的好处是什么？</li>
<li>如果把HTML5看作一个开放平台，那他的构建模块有哪些？</li>
<li>H5的语义化作用及语义化标签</li>
<li>请解释script，script async 和script defer的区别</li>
<li>为什么通常推荐将 CSS <code>&lt;link&gt;</code> 放置在 <code>&lt;head&gt;&lt;/head&gt;</code> 之间，而将 JS <code>&lt;script&gt;</code> 放置在 <code>&lt;/body&gt;</code> 之前？你知道有哪些例外吗？</li>
<li>什么是渐进式渲染（progressive rendering）？</li>
<li>HTML和XHTML有什么区别？</li>
<li>HTML5新标签</li>
<li>HTML5新特性</li>
<li>SEO概念及实现</li>
<li>web worker和web socket</li>
</ol>
<a id="more"></a>

<hr>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ol>
<li>css画各种图形</li>
<li>css权重及其引入方式</li>
<li>css定位属性</li>
<li>flex布局</li>
<li>px、em、rem的区别</li>
<li>IFC与BFC</li>
<li>盒子模型以及理解</li>
<li>Less预处理语言</li>
<li>三列布局</li>
<li>圣杯布局和双飞翼布局的实现</li>
<li>margin塌陷及合并问题</li>
<li>定位方式以及区别</li>
<li>vh与vw</li>
<li>如何实现响应式布局</li>
<li>z-index和叠加上下文是如何形成的</li>
<li>媒体查询</li>
<li>display以及相关属性</li>
<li>如何实现一个高性能css动画效果</li>
<li>css3动画</li>
<li>垂直水平居中</li>
</ol>
]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>序</title>
    <url>/2021/01/16/%E5%BA%8F/</url>
    <content><![CDATA[<p>以前总是纠结于博客的意义，但是渐渐发现，博客不仅仅是记录自己的学习，奇怪的想法，更多是对自己的一种约束。</p>
<p>折腾博客很费时间，真正该做的是充实博客的内容！</p>
<p>就像一句话所说的：“那些看似不起波澜的日复一日，会突然在某一天让人看到坚持的意义。”</p>
]]></content>
  </entry>
  <entry>
    <title>Javascript面经汇总</title>
    <url>/2021/01/17/Javascript%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<ol>
<li><p>时间代理</p>
</li>
<li><p>事件代理</p>
</li>
<li><p>请解释Javascript中的this是如何工作的（如何正确判断）</p>
</li>
<li><p>原始值和引用值类型以及区别</p>
</li>
<li><p>闭包与作用域</p>
</li>
<li><p>js继承</p>
</li>
<li><p>js模块化</p>
</li>
<li><p>new的原理</p>
</li>
<li><p>null undefined 区别</p>
</li>
<li><p>IIFE立即执行函数</p>
</li>
<li><p>原型和原型链</p>
<a id="more"></a>
</li>
<li><p>深拷贝与浅拷贝</p>
</li>
<li><p>匿名函数</p>
</li>
<li><p>判断数据类型的方式</p>
</li>
<li><p>宿主对象和原生对象</p>
</li>
<li><p>请指出以下代码的区别：<code>function Person()&#123;&#125;</code>、<code>var person = Person()</code>、<code>var person = new Person()</code>？</p>
</li>
<li><p>防抖和节流</p>
</li>
<li><p><code>document.write()</code></p>
</li>
<li><p>Ajax工作原理</p>
</li>
<li><p>跨域、同源策略及跨域实现方式和原理</p>
</li>
<li><p>js中的垃圾回收机制</p>
</li>
<li><p>冒泡机制</p>
</li>
<li><p>变量声明提升</p>
</li>
<li><p>document load 和 document DOMContentLoaded</p>
</li>
<li><p>== 和 ===有什么不同</p>
</li>
<li><p>js中的arguments</p>
</li>
<li><p>请解释什么是单页应用 (<code>single page app</code>), 以及如何使其对搜索引擎友好 (<code>SEO-friendly</code>)</p>
</li>
<li><p>Promise</p>
</li>
<li><p>图片懒加载</p>
</li>
<li><p>let var const</p>
</li>
<li><p>什么是事件循环机制？</p>
</li>
<li><p>函数柯里化</p>
</li>
<li><p>箭头函数</p>
</li>
<li><p>对象创建的三种方法</p>
</li>
<li><p>数组的方法</p>
</li>
<li><p>addEventListener和onClick()的区别</p>
</li>
<li><p>setTimeout用作倒计时为何会产生误差？</p>
</li>
<li><p>DOM的location对象</p>
</li>
<li><p>实现页面加载进度条</p>
</li>
<li><p><code>strict</code>模式</p>
</li>
<li><p>Symbol概念及其作用</p>
</li>
<li><p>Set和Map数据结构</p>
</li>
<li><p>Proxy</p>
</li>
<li><p>Reflect对象</p>
</li>
<li><p>循环语法比较及使用场景（for、forEach、for…in、for…of）</p>
</li>
<li><p>几种异步方式的比较（回调、setTimeout、Promise、Generator、async）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>毕设交接文档</title>
    <url>/2021/01/16/%E6%AF%95%E8%AE%BE%E4%BA%A4%E6%8E%A5%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h2 id="一、项目概况介绍"><a href="#一、项目概况介绍" class="headerlink" title="一、项目概况介绍"></a>一、项目概况介绍</h2><p>一种基于Node.js的web前端页面风格替换系统设计与实现</p>
<p>在Selenium Web Driver基础上搭建了浏览器自动化架构，从素材网页中提取颜色数据和组件数据，之后进行替换以及优化，然后给出评分，在采集和替换过程中留下了原始CSS数据，给用户提供参考。</p>
<p>系统是通过Node.js实现的，一共实现了三个算法：颜色数据采集算法，组件数据采集算法和风格替换算法。在线系统是由React，Egg.js完成的。</p>
<a id="more"></a>

<h2 id="二、技术综述"><a href="#二、技术综述" class="headerlink" title="二、技术综述"></a>二、技术综述</h2><h3 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h3><p>将多各种语言编程的脚本转换为JSON格式的接口请求，通过JSONWP通信协议与各浏览器的WebDriver进行通信，最u后WebDriver通过Http协议和真实浏览器进行通信。</p>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>js服务端执行环境，好处是数据类型和语法与浏览器没有太大的差异，Selenium的执行结果也是通过JSON返回，在Node中不需要做类型转换可以直接使用。</p>
<h3 id="主题色提取算法"><a href="#主题色提取算法" class="headerlink" title="主题色提取算法"></a>主题色提取算法</h3><p>基于文档分析。</p>
<h3 id="页面相似度算法"><a href="#页面相似度算法" class="headerlink" title="页面相似度算法"></a>页面相似度算法</h3><p>Edgar Marca的JS版本并且经过了优化。</p>
<h3 id="保留原始CSS"><a href="#保留原始CSS" class="headerlink" title="保留原始CSS"></a>保留原始CSS</h3><p>通过遍历document.styleSheets对象，并且调整了过滤和迭代语法树的规则，并且借助缓存机制对查找性能进行了优化。</p>
<h3 id="页面美观程度评估"><a href="#页面美观程度评估" class="headerlink" title="页面美观程度评估"></a>页面美观程度评估</h3><p>AIM独立部署，并且通过Websocket通信。</p>
<h3 id="平台构建相关技术"><a href="#平台构建相关技术" class="headerlink" title="平台构建相关技术"></a>平台构建相关技术</h3><p>Egg.js 以Koa为基础，进行了性能的强化，然后通过与MongoDB组合，实现了在线平台的构建。</p>
<p>前端使用了React生态进行展示，React通过对虚拟DOM进行处理，来完成对真实DOM的更新工作。（React服务端渲染）</p>
<h2 id="三、系统分析与设计"><a href="#三、系统分析与设计" class="headerlink" title="三、系统分析与设计"></a>三、系统分析与设计</h2>]]></content>
      <tags>
        <tag>毕设</tag>
      </tags>
  </entry>
</search>
